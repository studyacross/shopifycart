{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["import filesize from \"rollup-plugin-filesize\";\nimport asTable from \"as-table\";\nimport { green, yellowBright, red, bold } from \"chalk\";\n\n/**\n * Replacement for `??` which is only supported in node version 14 and above\n * @param {any} val The value to be checked\n * @param {any} def A default value to fallback to if the value is `null` or `undefined`\n * @returns The value or the default value\n */\nfunction defaultIfEmpty(val, def) {\n    return (val === null || val === undefined) ? def : val;\n}\n\n/**\n * Show summary of compiled files\n * @param {{\n *   warnLow?: number;\n *   warnHigh?: number;\n *   totalLow?: number;\n *   totalHigh?: number;\n *   showBrotliSize?: boolean;\n *   showMinifiedSize?: boolean;\n *   showGzippedSize?: boolean;\n * }} options Plugin options\n */\nexport default function (options = {}) {\n    /**\n     * @param {string | number} value \n     * @param {string} color \n     * @returns {string}\n     */\n    function colorize(value, color) {\n        switch (color) {\n            case \"green\": return green(value);\n            case \"yellow\": return yellowBright(value);\n            case \"red\": return red(value);\n        }\n    }\n\n    /**\n     * @param {string} value \n     * @returns {number}\n     */\n    function calculateByteSize(value) {\n        let [num, unit] = value.split(\" \");\n        switch (unit) {\n            case \"B\": return parseFloat(num);\n            case \"KB\": return parseFloat(num) * 1e3;\n            case \"MB\": return parseFloat(num) * 1e6;\n            case \"GB\": return parseFloat(num) * 1e9;\n            default: return num;\n        }\n    }\n\n    /**\n     * @param {number} num \n     * @returns {string}\n     */\n    function toReadableNumber(num) {\n        return num.toLocaleString(\"en\", { maximumFractionDigits: 2 });\n    }\n\n    /**\n     * @param {import('./index').SummaryOptions & { value: string, isTotal: boolean, colored: boolean }} options \n     * @returns {string}\n     */\n    function getReadableSize({ value, isTotal, warnLow, warnHigh, totalLow, totalHigh, colored = true } = {}) {\n        /** @type {string} */\n        let result;\n        value = parseFloat(value);\n        // File size unit\n        switch (true) {\n            case value < 1e3: result = toReadableNumber(value) + \" B\"; break;\n            case value >= 1e3 && value < 1e6: result = toReadableNumber(value / 1e3) + \" KB\"; break;\n            case value >= 1e6 && value < 1e9: result = toReadableNumber(value / 1e6) + \" MB\"; break;\n            case value >= 1e9 && value < 1e12: result = toReadableNumber(value / 1e6) + \" GB\"; break;\n            default: result = String(value.toFixed());\n        }\n\n        if (colored) {\n            const low = isTotal ? totalLow : warnLow;\n            const high = isTotal ? totalHigh : warnHigh;\n            const color = value < low ? \"green\" : value < high ? \"yellow\" : \"red\";\n            return colorize(result, color);\n        } else {\n            return result;\n        }\n    }\n\n    /** @type {import(\"./index\").SummaryPrint[]} */\n    let sizes = [];\n    let columnsMaxValue = {\n        Name: '',\n        Size: '',\n        Minified: '',\n        Gzipped: '',\n        Brotli: '',\n    }\n    let totalSize = 0;\n    let totalMinified = 0;\n    let totalGzipped = 0;\n    let totalBrotli = 0;\n\n    /** @type {import(\"./index\").SummaryOptions} */\n    const defaultOptions = {\n        warnLow: defaultIfEmpty(options.warnLow, 5e3),\n        warnHigh: defaultIfEmpty(options.warnHigh, 1e4),\n        totalLow: defaultIfEmpty(options.totalLow, 2e5),\n        totalHigh: defaultIfEmpty(options.totalHigh, 3e5),\n        showBrotliSize: defaultIfEmpty(options.showBrotliSize, true),\n        showGzippedSize: defaultIfEmpty(options.showGzippedSize, true),\n        showMinifiedSize: defaultIfEmpty(options.showMinifiedSize, true),\n    };\n\n    return {\n        name: \"rollup-plugin-summary\",\n        generateBundle: async function (...args) {\n            // Reset ahead of calculations\n            totalSize = totalMinified = totalGzipped = totalBrotli = 0;\n            sizes = [];\n\n            await filesize({\n                showBrotliSize: defaultOptions.showBrotliSize,\n                showGzippedSize: defaultOptions.showGzippedSize,\n                showMinifiedSize: defaultOptions.showMinifiedSize,\n                reporter: (options, bundle, { fileName, bundleSize, minSize, gzipSize, brotliSize }) => {\n                    // Calculating totals\n                    totalSize += calculateByteSize(bundleSize);\n\n                    /** @type {import(\"./index\").SummaryPrint} */\n                    const entry = {\n                        Name: fileName,\n                        Size: getReadableSize({ value: calculateByteSize(bundleSize), ...defaultOptions }),\n                    }\n\n                    if (defaultOptions.showMinifiedSize) {\n                        totalMinified += calculateByteSize(minSize);\n                        entry.Minified = getReadableSize({ value: calculateByteSize(minSize), ...defaultOptions });\n                    }\n                    if (defaultOptions.showGzippedSize) {\n                        totalGzipped += calculateByteSize(gzipSize);\n                        entry.Gzipped = getReadableSize({ value: calculateByteSize(gzipSize), ...defaultOptions });\n                    }\n                    if (defaultOptions.showBrotliSize) {\n                        totalBrotli += calculateByteSize(brotliSize);\n                        entry.Brotli = getReadableSize({ value: calculateByteSize(brotliSize), ...defaultOptions });\n                    }\n\n                    // Archiving entries\n                    sizes.push(entry);\n\n                    /** @type {(a: string, b: string) => string} */\n                    const max = (a, b) => a.length > b.length ? a : b;\n                    columnsMaxValue.Name = max(columnsMaxValue.Name, fileName);\n                }\n            }).generateBundle(...args);\n\n            columnsMaxValue = {\n                Name: columnsMaxValue.Name,\n                Size: getReadableSize({ value: totalSize, isTotal: true, ...defaultOptions, colored: false }),\n            }\n            if (defaultOptions.showMinifiedSize) {\n                columnsMaxValue.Minified = getReadableSize({ value: totalMinified, isTotal: true, ...defaultOptions, colored: false });\n            }\n            if (defaultOptions.showGzippedSize) {\n                columnsMaxValue.Gzipped = getReadableSize({ value: totalGzipped, isTotal: true, ...defaultOptions, colored: false });\n            }\n            if (defaultOptions.showBrotliSize) {\n                columnsMaxValue.Brotli = getReadableSize({ value: totalBrotli, isTotal: true, ...defaultOptions, colored: false });\n            }\n\n            /**\n             * @param {number} times \n             * @returns {string}\n             */\n            const makeDashes = (times) => \"-\".repeat(times);\n\n            sizes = sizes.sort((a, b) => a.Name.localeCompare(b.Name));\n\n            /** @type {import(\"./index\").SummaryPrint} */\n            const dashes = {\n                Name: makeDashes(columnsMaxValue.Name.length),\n                Size: makeDashes(columnsMaxValue.Size.length),\n            }\n            /** @type {import(\"./index\").SummaryPrint} */\n            const totals = {\n                Name: \"Total\",\n                Size: getReadableSize({ value: totalSize, isTotal: true, ...defaultOptions }),\n            }\n\n            if (defaultOptions.showMinifiedSize) {\n                dashes.Minified = makeDashes(columnsMaxValue.Minified.length);\n                totals.Minified = getReadableSize({ value: totalMinified, isTotal: true, ...defaultOptions });\n            }\n            if (defaultOptions.showGzippedSize) {\n                // 2 is to get the dashes to reach the right end of the table\n                dashes.Gzipped = makeDashes(columnsMaxValue.Gzipped.length);\n                totals.Gzipped = getReadableSize({ value: totalGzipped, isTotal: true, ...defaultOptions });\n            }\n            if (defaultOptions.showBrotliSize) {\n                // 2 is to get the dashes to reach the right end of the table\n                dashes.Brotli = makeDashes(columnsMaxValue.Brotli.length + 2);\n                totals.Brotli = getReadableSize({ value: totalBrotli, isTotal: true, ...defaultOptions });\n            }\n\n            // Adding totals (footer)\n            sizes.push(dashes, totals);\n            // Printing\n            console.info(`\\n${bold(\"ðŸ“„ Generated files:\\n\")}\\n${asTable(sizes.map(item => {\n                /** @type {import(\"./index\").SummaryPrint} */\n                const output = {\n                    Name: item.Name,\n                    Size: item.Size,\n                }\n                if (defaultOptions.showMinifiedSize) {\n                    output.Minified = item.Minified;\n                }\n                if (defaultOptions.showGzippedSize) {\n                    output.Gzipped = item.Gzipped;\n                }\n                if (defaultOptions.showBrotliSize) {\n                    output.Brotli = item.Brotli;\n                }\n                return output;\n            }))}\\n`);\n        }\n    }\n}\n"],"names":["defaultIfEmpty","val","def","options","calculateByteSize","value","num","unit","split","parseFloat","toReadableNumber","toLocaleString","maximumFractionDigits","getReadableSize","isTotal","warnLow","warnHigh","totalLow","totalHigh","colored","result","String","toFixed","high","color","green","yellowBright","red","colorize","sizes","columnsMaxValue","Name","Size","Minified","Gzipped","Brotli","totalSize","totalMinified","totalGzipped","totalBrotli","defaultOptions","showBrotliSize","showGzippedSize","showMinifiedSize","name","generateBundle","async","args","filesize","reporter","bundle","fileName","bundleSize","minSize","gzipSize","brotliSize","entry","push","a","b","length","makeDashes","times","repeat","sort","localeCompare","dashes","totals","console","info","bold","asTable","map","item","output"],"mappings":"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"}