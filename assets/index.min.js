class t{constructor(t){this.status=422,this.message="Cart Error",this.description=t}}class s{constructor(){this.status=404,this.message="Cart Error",this.description="Cannot find variant"}}exports.InventoryError=t,exports.ShopifyCart=class{constructor(t){this._settings={url:"",postConfig:{method:"POST",credentials:"same-origin",headers:{"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json;"}},updateState:!0},this._settings={...this._settings,...t},this.cartEvent("cart:ready")}get state(){return this._state}get settings(){return this._settings}async getState(){this.cartEvent("cart:requestStarted","/cart.js");const t=await fetch(`${this._settings.url}/cart.js`);return this._state=await t.json(),this.cartEvent("cart:requestComplete","/cart.js"),this._state}async addItem(t){const s=Array.isArray(t)?t:[t],a=await this.post("/cart/add.js",JSON.stringify({items:s}));return this._settings.updateState&&await this.getState(),a}async addItemFromForm(t){const s=new FormData(t);if(!s.get("id"))throw"Cart form missing required property ID";const a=JSON.stringify(Object.fromEntries(s.entries())),e=await this.post("/cart/add.js",a);return this._settings.updateState&&await this.getState(),e}async clearAttributes(){const t=await this.getState(),s=JSON.stringify({attributes:this.clearProps(t.attributes)});return await this.post("/cart/update.js",s)}async clearItems(){return await this.post("/cart/clear.js")}async clearNote(){return await this.post("/cart/update.js",JSON.stringify({note:""}))}async removeItem(t){return await this.post("/cart/change.js",JSON.stringify({quantity:0,...t}))}async updateAttributes(t){return await this.post("/cart/update.js",JSON.stringify({attributes:{...t}}))}async updateItem(t){return await this.post("/cart/change.js",JSON.stringify(t))}async updateNote(t){return await this.post("/cart/update.js",JSON.stringify({note:t}))}async post(t,s){const a=this._settings.url+t,e=this._settings.postConfig;s&&(e.body=s),this.cartEvent("cart:requestStarted",t);const r=await fetch(a,e),i=await r.json();return this.checkResponse(i),this.cartEvent("cart:requestComplete",t),i}checkResponse(a){if(404===a.status)throw new s;if(422===a.status)throw new t(a.description);a.token&&(this._state=a)}clearProps(t){const s={};return Object.getOwnPropertyNames(t).forEach((t=>s[t]="")),s}cartEvent(t,s){document.dispatchEvent(new CustomEvent(t,{detail:{cart:this,route:s},bubbles:!0,cancelable:!0,composed:!1}))}},exports.VariantError=s;
